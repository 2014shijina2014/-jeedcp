<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>controller</name>
	<filePath>src/main/java/${packageName}/${moduleName}/web/${subModuleName}</filePath>
	<fileName>${ClassName}Controller.java</fileName>
	<content><![CDATA[
/**
 * Copyright &copy; 2015-2020 <a href="http://taoyuanwangluo.com/">taoyuanwangluo</a> All rights reserved.
 */
package ${packageName}.${moduleName}.web<#if subModuleName != "">.${subModuleName}</#if>;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.shiro.authz.annotation.Logical;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.jeeplus.common.utils.MyBeanUtils;
import com.jeeplus.common.config.Global;
import com.jeeplus.common.web.BaseController;
import com.jeeplus.common.utils.StringUtils;
import ${packageName}.${moduleName}.entity<#if subModuleName != "">.${subModuleName}</#if>.${ClassName};
import ${packageName}.${moduleName}.service<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Service;

/**
 * ${functionName}Controller
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@Controller
@RequestMapping(value = "${r"${adminPath}"}/${urlPrefix}")
public class ${ClassName}Controller extends BaseController {

	@Autowired
	private ${ClassName}Service ${className}Service;
	
	@ModelAttribute
	public ${ClassName} get(@RequestParam(required=false) String id) {
		${ClassName} entity = null;
		if (StringUtils.isNotBlank(id)){
			entity = ${className}Service.get(id);
		}
		if (entity == null){
			entity = new ${ClassName}();
		}
		return entity;
	}
	
	/**
	 * ${functionNameSimple}列表页面
	 */
	@RequiresPermissions("${permissionPrefix}:list")
	@RequestMapping(value = {"list", ""})
	public String list(${ClassName} ${className}, HttpServletRequest request, HttpServletResponse response, Model model) {
		List<${ClassName}> list = ${className}Service.findList(${className}); 
		model.addAttribute("list", list);
		return "${lastPackageName}/${viewPrefix}List";
	}

	/**
	 * 查看，增加，编辑${functionNameSimple}表单页面
	 */
	@RequiresPermissions(value={"${permissionPrefix}:view","${permissionPrefix}:add","${permissionPrefix}:edit"},logical=Logical.OR)
	@RequestMapping(value = "form")
	public String form(${ClassName} ${className}, Model model) {
		if (${className}.getParent()!=null && StringUtils.isNotBlank(${className}.getParent().getId())){
			${className}.setParent(${className}Service.get(${className}.getParent().getId()));
			// 获取排序号，最末节点排序号+30
			if (StringUtils.isBlank(${className}.getId())){
				${ClassName} ${className}Child = new ${ClassName}();
				${className}Child.setParent(new ${ClassName}(${className}.getParent().getId()));
				List<${ClassName}> list = ${className}Service.findList(${className}); 
				if (list.size() > 0){
					${className}.setSort(list.get(list.size()-1).getSort());
					if (${className}.getSort() != null){
						${className}.setSort(${className}.getSort() + 30);
					}
				}
			}
		}
		if (${className}.getSort() == null){
			${className}.setSort(30);
		}
		model.addAttribute("${className}", ${className});
		return "${lastPackageName}/${viewPrefix}Form";
	}

	/**
	 * 保存${functionNameSimple}
	 */
	@RequiresPermissions(value={"${permissionPrefix}:add","${permissionPrefix}:edit"},logical=Logical.OR)
	@RequestMapping(value = "save")
	public String save(${ClassName} ${className}, Model model, RedirectAttributes redirectAttributes) throws Exception{
		if (!beanValidator(model, ${className})){
			return form(${className}, model);
		}
		if(!${className}.getIsNewRecord()){//编辑表单保存
			${ClassName} t = ${className}Service.get(${className}.getId());//从数据库取出记录的值
			MyBeanUtils.copyBeanNotNull2Bean(${className}, t);//将编辑表单中的非NULL值覆盖数据库记录中的值
			${className}Service.save(t);//保存
		}else{//新增表单保存
			${className}Service.save(${className});//保存
		}
		addMessage(redirectAttributes, "保存${functionNameSimple}成功");
		return "redirect:"+Global.getAdminPath()+"/${viewPrefix}/?repage";
	}
	
	/**
	 * 删除${functionNameSimple}
	 */
	@RequiresPermissions("${permissionPrefix}:del")
	@RequestMapping(value = "delete")
	public String delete(${ClassName} ${className}, RedirectAttributes redirectAttributes) {
		${className}Service.delete(${className});
		addMessage(redirectAttributes, "删除${functionNameSimple}成功");
		return "redirect:"+Global.getAdminPath()+"/${viewPrefix}/?repage";
	}

	@RequiresPermissions("user")
	@ResponseBody
	@RequestMapping(value = "treeData")
	public List<Map<String, Object>> treeData(@RequestParam(required=false) String extId, HttpServletResponse response) {
		List<Map<String, Object>> mapList = Lists.newArrayList();
		List<${ClassName}> list = ${className}Service.findList(new ${ClassName}());
		for (int i=0; i<list.size(); i++){
			${ClassName} e = list.get(i);
			if (StringUtils.isBlank(extId) || (extId!=null && !extId.equals(e.getId()) && e.getParentIds().indexOf(","+extId+",")==-1)){
				Map<String, Object> map = Maps.newHashMap();
				map.put("id", e.getId());
				map.put("pId", e.getParentId());
				map.put("name", e.getName());
				mapList.add(map);
			}
		}
		return mapList;
	}
	
}]]>
	</content>
</template>